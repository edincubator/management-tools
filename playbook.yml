- hosts: cluster
  remote_user: centos
  tasks:
    - set_fact:
        user_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters') }}" 
    - name: create unix group at the cluster
      group:
        name: "{{ username }}"
      become: yes
      become_method: sudo
    - name: create unix user at the cluster
      user:
        name: "{{ username }}"
        group: "{{ username }}"
      become: yes
      become_method: sudo

- hosts: ldap
  remote_user: centos
  tasks:
    - getent:
        database: passwd
        key: "{{ username }}"
    - getent:
        database: group
        key: "{{ username }}"
    - set_fact:
        gid: "{{ getent_group[username][1] }}"
        uid: "{{ getent_passwd[username][1] }}"
    - name: create LDAP group
      ldap_entry:
        dn: cn={{ username }},ou=groups,dc=edincubator,dc=eu
        objectClass: posixGroup
        attributes:
          gidnumber: "{{ gid }}"
        bind_dn: cn=admin,dc=edincubator,dc=eu
        bind_pw: "{{ ldap_bind_password }}"
        server_uri: ldap://localhost
    - name: create LDAP user
      ldap_entry:
        dn: cn={{ username }},ou=user,dc=edincubator,dc=eu
        objectClass: 
          - posixAccount
          - inetOrgPerson
        attributes:
          givenname: "{{ username }}"
          userpassword: \{MD5\}"{{ user_password | hash('md5') }}"
          gidnumber: "{{ gid }}"
          uidnumber: "{{ uid }}"
          uid: "{{ username }}"
          homeDirectory: /user/"{{ username }}"
          sn: "{{ username }}"
        bind_dn: cn=admin,dc=edincubator,dc=eu
        bind_pw: "{{ ldap_bind_password }}"
        server_uri: ldap://localhost
    - name: add user to subgrantees group
      ldap_attr:
        dn: cn=subgrantees,ou=groups,dc=edincubator,dc=eu
        name: member
        values: cn={{ username }},ou=user,dc=edincubator,dc=eu
        bind_dn: cn=admin,dc=edincubator,dc=eu
        bind_pw: "{{ ldap_bind_password }}"
        server_uri: ldap://localhost

- hosts: kerberos
  remote_user: centos
  tasks:
    - name: create Kerberos principal
      command: kadmin -p admin/admin@EDINCUBATOR.EU -w "{{ kerberos_admin_password }}" addprinc -randkey "{{ username }}"@EDINCUBATOR.EU
      become: yes
      become_method: sudo
      ignore_errors: True
    - name: create Kerberos principals for each host
      shell: kadmin -p admin/admin@EDINCUBATOR.EU -w "{{ kerberos_admin_password }}" addprinc -randkey "{{ username }}"/"{{ item }}"@EDINCUBATOR.EU
      loop: "{{ query('inventory_hostnames', 'cluster') }}"
      become: yes
      become_method: sudo
      ignore_errors: True
    - name: create Kerberos Keytab
      shell: kadmin -p admin/admin@EDINCUBATOR.EU -w "{{ kerberos_admin_password }}" ktadd -k /etc/security/keytabs/"{{ username }}".service.keytab "{{ username }}"@EDINCUBATOR.EU
      become: yes
      become_method: sudo
      ignore_errors: True
    - name: create Kerberos Keytab for each host
      shell: kadmin -p admin/admin@EDINCUBATOR.EU -w "{{ kerberos_admin_password }}" ktadd -k /etc/security/keytabs/"{{ username }}".service.keytab "{{ username }}"/"{{ item }}"@EDINCUBATOR.EU
      loop: "{{ query('inventory_hostnames', 'cluster') }}"
      become: yes
      become_method: sudo
      ignore_errors: True

- hosts: masters
  remote_user: centos
  tasks:
    - name: kinit HDFS
      command: kinit -kt /etc/security/keytabs/hdfs.headless.keytab hdfs-edi_test@EDINCUBATOR.EU
      become: yes
      become_method: sudo
      become_user: hdfs
    - name: create HDFS home
      command: hdfs dfs -mkdir /user/"{{ username }}"
      become: yes
      become_method: sudo
      become_user: hdfs
      ignore_errors: True
    - name: kinit HBase
      command: kinit -kt /etc/security/keytabs/hbase.headless.keytab hbase-edi_test@EDINCUBATOR.EU
      become: yes
      become_method: sudo
      become_user: hbase
    - name: create HBase namespace
      shell: echo "create_namespace '"{{ username }}"'" | hbase shell
      become: yes
      become_method: sudo
      become_user: hbase
      ignore_errors: True
    - name: kinit Hive
      command: kinit -kt /etc/security/keytabs/hive.service.keytab hive/edi-master.novalocal@EDINCUBATOR.EU
      become: yes
      become_method: sudo
      become_user: hive
    - name: create Hive namespace
      shell: beeline -u "jdbc:hive2://edi-master.novalocal:10000/default;principal=hive/edi-master.novalocal@EDINCUBATOR.EU;" -e "CREATE DATABASE "{{ username }}""
      become: yes
      become_method: sudo
      become_user: hive
      ignore_errors: True
    - name: get NiFi token
      uri:
        url: "{{ nifi_url }}/nifi-api/access/token"
        method: POST
        body_format: form-urlencoded
        body:
          username: "{{ nifi_username }}"
          password: "{{ nifi_password }}"
        validate_certs: no
        status_code: 201
        return_content: yes
      register: nifi_token
    - name: get NiFi process groups
      uri:
        url: "{{ nifi_url }}/nifi-api/flow/process-groups/root"
        method: GET
        headers:
          Authorization: "Bearer {{ nifi_token['content'] }}"
        validate_certs: no
        return_content: yes
      register: nifi_process_groups
    - set_fact:
        process_group_count: "{{ nifi_process_groups.json.processGroupFlow.flow.processGroups|count}}"
    - name: NiFi create process group
      uri:
        url: "{{ nifi_url }}/nifi-api/process-groups/root/process-groups"
        method: POST
        headers:
          Authorization: "Bearer {{ nifi_token['content'] }}"
        body_format: json
        body: {'revision': {'version': 0}, 'component': {'name': '{{ username }} Process Group', "position": { 'x': "{{ process_group_count|int * 450 }}", 'y': 0 }}}
        validate_certs: no
        status_code: 201
      register: nifi_process_group
    - name: create KeytabCredentialService
      uri:  
        url: "{{ nifi_url }}/nifi-api/process-groups/{{ nifi_process_group.json.id }}/controller-services"
        method: POST
        headers:
          Authorization: "Bearer {{ nifi_token['content'] }}"
        body_format: json
        body: {
                'revision': {
                  'version': 0
                },
                'component': {
                  'name': 'user4KeytabCredentialsService',
                  'type': 'org.apache.nifi.kerberos.KeytabCredentialsService',
                  'bundle': {
                          'group': 'org.apache.nifi',
                          'artifact': 'nifi-kerberos-credentials-service-nar',
                          'version': '1.9.0.3.4.0.0-155'
                      },
                      'controllerServiceApis': [
                          {
                              'type': 'org.apache.nifi.kerberos.KerberosCredentialsService',
                              'bundle': {
                                  'group': 'org.apache.nifi',
                                  'artifact': 'nifi-standard-services-api-nar',
                                  'version': '1.9.0.3.4.0.0-155'
                              }
                          }
                      ],
                      'state': 'ENABLED',
                      'restricted': true,
                      'properties': {
                          'Kerberos Keytab': '/etc/security/keytabs/"{{ username }}".service.keytab',
                          'Kerberos Principal': '"{{ username }}"@EDINCUBATOR.EU'
                      }
                }
              }
        validate_certs: no
        status_code: 201
    
- hosts: kafka-client
  remote_user: centos
  tasks:
    - name: create Kafka topic
      shell: /usr/hdp/current/kafka-broker/bin/kafka-topics.sh --create --zookeeper "{{ zookeeper_servers }}" --topic "{{ username }}" --partitions 3 --replication-factor 3
      become: yes
      become_method: sudo
      ignore_errors: True

- hosts: 127.0.0.1
  connection: local
  tasks:
    - name: make a copy of HDFS Ranger permission template
      copy:
        src: ranger/hdfs.json
        dest: build/hdfs.json
        follow: yes
    - name: replace variables at HDFS Ranger permissions config
      replace:
        path: build/hdfs.json
        regexp: \{\{USERNAME\}\}
        replace: "{{ username }}"
    - name: make a copy of HBase Ranger permission template
      copy:
        src: ranger/hbase.json
        dest: build/hbase.json
        follow: yes
    - name: replace variables at Hbase Ranger permissions config
      replace:
        path: build/hbase.json
        regexp: \{\{USERNAME\}\}
        replace: "{{ username }}"
    - name: make a copy of Hive Ranger permission template
      copy:
        src: ranger/hive.json
        dest: build/hive.json
        follow: yes
    - name: replace variables at Hive Ranger permissions config
      replace:
        path: build/hive.json
        regexp: \{\{USERNAME\}\}
        replace: "{{ username }}"
    - name: make a copy of Kafka Ranger permission template
      copy:
        src: ranger/kafka.json
        dest: build/kafka.json
        follow: yes
    - name: replace variables at Kafka Ranger permissions config
      replace:
        path: build/kafka.json
        regexp: \{\{USERNAME\}\}
        replace: "{{ username }}"

- hosts: masters
  remote_user: centos
  tasks:
    - name: Set HDFS Ranger permissions
      uri:
        url: "{{ ranger_url }}/service/public/v2/api/policy"
        user: "{{ ranger_username }}"
        password: "{{ ranger_password }}"
        force_basic_auth: yes
        method: POST
        body: "{{ lookup('file', 'build/hdfs.json') }}"
        body_format: "json"
    - name: Set HBase Ranger permissions
      uri:
        url: "{{ ranger_url }}/service/public/v2/api/policy"
        user: "{{ ranger_username }}"
        password: "{{ ranger_password }}"
        force_basic_auth: yes
        method: POST
        body: "{{ lookup('file', 'build/hbase.json') }}"
        body_format: "json"
    - name: Set Hive Ranger permissions
      uri:
        url: "{{ ranger_url }}/service/public/v2/api/policy"
        user: "{{ ranger_username }}"
        password: "{{ ranger_password }}"
        force_basic_auth: yes
        method: POST
        body: "{{ lookup('file', 'build/hive.json') }}"
        body_format: "json"
    - name: Set Kafka Ranger permissions
      uri:
        url: "{{ ranger_url }}/service/public/v2/api/policy"
        user: "{{ ranger_username }}"
        password: "{{ ranger_password }}"
        force_basic_auth: yes
        method: POST
        body: "{{ lookup('file', 'build/kafka.json') }}"
        body_format: "json"

